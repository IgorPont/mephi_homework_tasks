"""
–ó–∞–¥–∞–Ω–∏–µ 4. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π.

–£—Å–ª–æ–≤–∏–µ:
    –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.
    –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
    –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –∑–∞–¥–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

–ü—Ä–∏–º–µ—Ä—ã:
    –¥–ª–∏–Ω–∞ = 8 -> aG#2z@K7
    –¥–ª–∏–Ω–∞ = 12 -> Q2@aZ7k!9b#L
"""

import random
import string


def generate_password(length_pass: int = 6) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –≤–∫–ª—é—á–∞—é—â–∏–π –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        length_pass (int): –¥–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –ø–∞—Ä–æ–ª—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.

    –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ ‚â• 4 (–∏–Ω–∞—á–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤).
        2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        3. –î–æ–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏–∑ –æ–±—â–µ–≥–æ –ø—É–ª–∞.
        4. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.

    –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞:
        from sessions_tasks.programming_in_python.session01.task04_password_generator import generate_password
        print(generate_password(8)) # aG#2z@K7
        print(generate_password(12)) # Q2@aZ7k!9b#L
    """
    if length_pass < 4:
        raise ValueError("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤")

    # –ù–∞–±–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    symbols = string.punctuation

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    password_chars = [
        random.choice(lowercase),
        random.choice(uppercase),
        random.choice(digits),
        random.choice(symbols),
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    all_chars = lowercase + uppercase + digits + symbols
    password_chars += random.choices(all_chars, k=length_pass - 4)

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    random.shuffle(password_chars)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    return "".join(password_chars)


if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ poetry:
        poetry run python sessions_tasks/programming_in_python/session01/task04_password_generator.py

    """
    print("üß© –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π:\n")
    for length_pass in [6, 8, 12, 16]:
        print(f"–î–ª–∏–Ω–∞ {length_pass:2}: {generate_password(length_pass)}")
