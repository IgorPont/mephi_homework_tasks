"""
–ó–∞–¥–∞–Ω–∏–µ 5. –ü–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º.

–£—Å–ª–æ–≤–∏–µ:
    –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏–ª–∏ "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º".
    "–ü–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –±—É–∫–≤—É, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–ª–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

–ü—Ä–∏–º–µ—Ä—ã:
    "abba" -> –ø–∞–ª–∏–Ω–¥—Ä–æ–º
    "abca" -> –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º (—É–¥–∞–ª—è–µ–º 'c')
    "abcdef" -> –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
"""

from typing import Tuple


def is_palindrome(s: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        s (str): –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ.
    """
    return s == s[::-1]


def is_almost_palindrome(s: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏–ª–∏ –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        s (str): –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        tuple[bool, str]: –∫–æ—Ä—Ç–µ–∂ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) —Å –æ–¥–Ω–∏–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
            - "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"
            - "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"
            - "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"
    """
    if is_palindrome(s):
        return True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"

    left, right = 0, len(s) - 1
    while left < right:
        if s[left] != s[right]:
            # –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞
            s1 = s[left + 1:right + 1]
            s2 = s[left:right]
            if s1 == s1[::-1] or s2 == s2[::-1]:
                return True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"
            else:
                return False, "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"
        left += 1
        right -= 1

    return False, "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"


if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Poetry:
        poetry run python sessions_tasks/programming_in_python/session01/task05_almost_palindrome.py
    """

    test_strings = ["abba", "abca", "abcdef", "racecar", "radkar", "madmam"]

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω–æ—Å—Ç—å:\n")
    for s in test_strings:
        result, kind = is_almost_palindrome(s)
        print(f"{s:<10} -> {kind}")
