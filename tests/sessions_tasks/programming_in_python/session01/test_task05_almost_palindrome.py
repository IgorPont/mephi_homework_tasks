"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è task05_almost_palindrome.py

–ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è:
    - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤;
    - "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤" (—É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª);
    - –Ω–µ–ø–∞–ª–∏–Ω–¥—Ä–æ–º (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞);
    - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª, –¥–ª–∏–Ω–∞ 2;
    - —Ä–∞–±–æ—Ç–∞ —Å —é–Ω–∏–∫–æ–¥–æ–º (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, —ç–º–æ–¥–∑–∏);
    - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: (bool, str) —Å –º–µ—Ç–∫–∞–º–∏ "–ø–∞–ª–∏–Ω–¥—Ä–æ–º" / "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º" / "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º".
"""

import pytest
from sessions_tasks.programming_in_python.session01.task05_almost_palindrome import (
    is_palindrome,
    is_almost_palindrome,
)


@pytest.mark.parametrize(
    "s, expected",
    [
        ("", True),
        ("a", True),
        ("aa", True),
        ("aba", True),
        ("abba", True),
        ("abc", False),
        ("ab", False),
        ("üëçüëç", True),
        ("–∫–∞–∑–∞–∫", True),
        ("–ö–∞–∑–∞–∫", False),
    ],
)
def test_is_palindrome_basic(s: str, expected: bool):
    """
    –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å—Ç–æ–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω–æ—Å—Ç–∏ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤.
    """
    assert is_palindrome(s) is expected


@pytest.mark.parametrize(
    "s, expected_bool, expected_kind",
    [
        # –ü–∞–ª–∏–Ω–¥—Ä–æ–º—ã
        ("", True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("a", True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("aba", True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("abba", True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("racecar", True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        # –ü–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã (—É–¥–∞–ª–∏—Ç—å 1 —Å–∏–º–≤–æ–ª)
        ("abca", True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("radkar", True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("madmam", True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("–∞–∞–∞–±", True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("abxyba", True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        # –ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
        ("abcdef", False, "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
        ("üëçaüëçbüëç", False, "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"),
    ],
)
def test_is_almost_palindrome_various(s: str, expected_bool: bool, expected_kind: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—Ç—Ä–æ–∫
    """
    ok, kind = is_almost_palindrome(s)
    assert ok is expected_bool
    assert kind == expected_kind


def test_is_almost_palindrome_length_two():
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª–∏–Ω—ã 2:
        "aa" -> –ø–∞–ª–∏–Ω–¥—Ä–æ–º
        "ab" -> –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º (—É–¥–∞–ª—è–µ–º 'a' –∏–ª–∏ 'b' –∏ –ø–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º)
    """
    assert is_almost_palindrome("aa") == (True, "–ø–∞–ª–∏–Ω–¥—Ä–æ–º")
    assert is_almost_palindrome("ab") == (True, "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º")


def test_is_almost_palindrome_returns_tuple_format():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: (bool, str) –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–µ—Ç–∫–∏.
    """
    result = is_almost_palindrome("xyz")
    assert isinstance(result, tuple) and len(result) == 2
    ok, kind = result
    assert isinstance(ok, bool)
    assert kind in {"–ø–∞–ª–∏–Ω–¥—Ä–æ–º", "–ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º", "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º"}


def test_is_almost_palindrome_unicode_strict():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä/—è–∑—ã–∫ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ:
    '–ö–∞–∑–∞–∫' (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –ö) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –Ω–æ –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –Ω–µ —Å—Ç–∞–Ω–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–¥–Ω–æ–π –±—É–∫–≤—ã.
    """
    assert is_almost_palindrome("–ö–∞–∑–∞–∫") == (False, "–Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º")
